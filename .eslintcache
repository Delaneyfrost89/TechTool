[{"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/index.js":"1","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/App.js":"2","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/reportWebVitals.js":"3","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/pages/Scaling.js":"4","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/ScaleAnalog.js":"5","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/styles/GlobalStyles.js":"6","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/Nav.js":"7","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/pages/Conversion.js":"8","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/pages/Home.js":"9","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/ConvertTime.js":"10","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/ConvertTemp.js":"11","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/ConvertPressure.js":"12","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/utilities/dropdown.js":"13","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/pages/AboutUs.js":"14","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/VolumeFlowRate.js":"15"},{"size":500,"mtime":1606878503752,"results":"16","hashOfConfig":"17"},{"size":1087,"mtime":1609031440998,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1606878503753,"results":"19","hashOfConfig":"17"},{"size":221,"mtime":1608854351741,"results":"20","hashOfConfig":"17"},{"size":5430,"mtime":1628429528767,"results":"21","hashOfConfig":"17"},{"size":1010,"mtime":1628395982071,"results":"22","hashOfConfig":"17"},{"size":3829,"mtime":1628429344490,"results":"23","hashOfConfig":"17"},{"size":3542,"mtime":1628429451625,"results":"24","hashOfConfig":"17"},{"size":1865,"mtime":1628429624188,"results":"25","hashOfConfig":"17"},{"size":3879,"mtime":1628429512883,"results":"26","hashOfConfig":"17"},{"size":5748,"mtime":1628430501421,"results":"27","hashOfConfig":"17"},{"size":6646,"mtime":1628430428938,"results":"28","hashOfConfig":"17"},{"size":1120,"mtime":1607234498638,"results":"29","hashOfConfig":"30"},{"size":1659,"mtime":1628429598356,"results":"31","hashOfConfig":"17"},{"size":7293,"mtime":1628430084771,"results":"32","hashOfConfig":"17"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"10c5nck",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"35"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"qmmzhg",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/index.js",[],["70","71"],"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/App.js",[],"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/reportWebVitals.js",[],"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/pages/Scaling.js",[],"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/ScaleAnalog.js",[],"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/styles/GlobalStyles.js",[],"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/Nav.js",["72"],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { BiMenu } from 'react-icons/bi'\nimport { IoMdClose } from 'react-icons/io'\nimport Logo from '../assets/CCE_Logo.jpg'\n\nconst NavComponent = ({ click, handleClick, closeMobileMenu }) => {\n  return (\n    <NavbarStyles>\n      <Link to='/' className='navbar-logo' onClick={closeMobileMenu}>\n        <img src={Logo} alt='CCE Logo' />\n      </Link>\n      <div className='menu-icon' onClick={handleClick}>\n        <span>{click ? <IoMdClose /> : <BiMenu />}</span>\n      </div>\n\n      <ul className={click ? 'nav-menu active ' : 'nav-menu '}>\n        <li className='nav-item'>\n          <Link to='/' className='nav-links' onClick={closeMobileMenu}>\n            Home\n          </Link>\n        </li>\n        <li className='nav-item'>\n          <Link\n            to='/Conversion'\n            className='nav-links'\n            onClick={closeMobileMenu}\n          >\n            Conversions\n          </Link>\n        </li>\n        <li className='nav-item'>\n          <Link to='/Scaling' className='nav-links' onClick={closeMobileMenu}>\n            Scaling\n          </Link>\n        </li>\n        <li className='nav-item'>\n          <Link to='/AboutUs' className='nav-links' onClick={closeMobileMenu}>\n            About Us\n          </Link>\n        </li>\n      </ul>\n    </NavbarStyles>\n  )\n}\n\nexport default NavComponent\n\nconst NavbarStyles = styled.nav`\n  position: fixed;\n  background: #fff;\n  height: 6rem;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2rem;\n  color: #333;\n  box-shadow: 0px 1px 3px #333;\n  z-index: 900;\n  width: 100vw;\n\n  .navbar-logo {\n    cursor: pointer;\n    margin-top: -10px;\n    margin-left: 0.6rem;\n    img {\n      width: 280px;\n    }\n  }\n\n  .nav-menu {\n    display: grid;\n    grid-template-columns: repeat(4, auto);\n    gap: 1.6rem;\n    list-style: none;\n    text-align: center;\n    width: 50vw;\n    justify-content: end;\n    margin-right: 2rem;\n  }\n\n  .nav-item {\n    display: flex;\n    align-items: center;\n    height: 80px;\n  }\n\n  .nav-links {\n    color: #333;\n    text-decoration: none;\n    font-size: 1.2rem;\n  }\n\n  .nav-links:hover {\n    transition: all 0.4s ease-out;\n    /* font-size: 1.25rem; */\n    color: rgb(0, 107, 161);\n  }\n\n  .nav-links-mobile {\n    display: none;\n  }\n\n  .menu-icon {\n    display: none;\n  }\n\n  @media screen and (max-width: 960px) {\n    .nav-menu {\n      position: absolute;\n      z-index: 1;\n      display: flex;\n      flex-direction: column;\n      width: 40vw;\n      height: auto;\n      margin-right: 0;\n      top: 6rem;\n      right: -100vh;\n      opacity: 0;\n      transition: all 0.5s ease;\n      box-shadow: 4px 4px 8px 1px rgba(-1, 0, 0, 0.4);\n    }\n\n    .nav-menu.active {\n      position: absolute;\n      z-index: 1;\n      background: #fff;\n      width: 60vw;\n      height: auto;\n      padding: 1rem 0;\n      top: 6rem;\n      right: 0;\n      opacity: 1;\n      transition: all 0.5s ease;\n    }\n\n    .nav-links {\n      text-align: center;\n      padding: 1rem;\n      width: 100%;\n      height: auto;\n    }\n\n    .nav-links:hover {\n      transition: all 0.4s ease-out;\n      font-size: 1.3rem;\n      color: #000;\n    }\n\n    .navbar-logo {\n    }\n\n    .menu-icon {\n      display: block;\n      font-size: 2rem;\n      margin-right: 1.4rem;\n      cursor: pointer;\n      z-index: 1000;\n    }\n\n    .nav-links-mobile {\n      display: block;\n      text-align: center;\n      padding: 1.5rem;\n      margin: 2rem auto;\n      border-radius: 4px;\n      width: 80%;\n      background: #1888ff;\n      text-decoration: none;\n      color: #fff;\n      font-size: 1.5rem;\n      z-index: 1;\n    }\n\n    .nav-links-mobile:hover {\n      background: #fff;\n      color: #1888ff;\n      transition: 250ms;\n    }\n  }\n`\n","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/pages/Conversion.js",["73"],"import { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport ConvertTime from '../components/ConvertTime'\nimport ConvertPressure from '../components/ConvertPressure'\nimport ConvertTemp from '../components/ConvertTemp'\nimport styled from 'styled-components'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { BiChevronDown, BiChevronUp } from 'react-icons/bi'\nimport { PageWrapper } from '../styles/GlobalStyles'\nimport VolumeFlowRateConversion from '../components/VolumeFlowRate'\n\nconst Conversion = () => {\n  const [showPressure, setShowPressure] = useState(false)\n  const [showTemp, setShowTemp] = useState(false)\n  const [showVolFlow, setShowVolFlow] = useState(false)\n  const [showTime, setShowTime] = useState(false)\n\n  return (\n    <PageWrapper>\n      <ExpandBoxStyles\n        onClick={() => {\n          setShowPressure(!showPressure)\n        }}\n      >\n        <h3>\n          Pressure{' '}\n          <span>{showPressure ? <BiChevronUp /> : <BiChevronDown />}</span>\n        </h3>\n      </ExpandBoxStyles>\n      <AnimatePresence>\n        {showPressure && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            style={{ overflow: 'hidden' }}\n          >\n            <ConvertPressure />\n          </motion.div>\n        )}\n      </AnimatePresence>\n      <ExpandBoxStyles\n        onClick={() => {\n          setShowTemp(!showTemp)\n        }}\n      >\n        <h3>\n          Temperature{' '}\n          <span>{showTemp ? <BiChevronUp /> : <BiChevronDown />}</span>\n        </h3>\n      </ExpandBoxStyles>\n      <AnimatePresence>\n        {showTemp && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            style={{ overflow: 'hidden' }}\n          >\n            <ConvertTemp />\n          </motion.div>\n        )}\n      </AnimatePresence>\n      <ExpandBoxStyles\n        onClick={() => {\n          setShowVolFlow(!showVolFlow)\n        }}\n      >\n        <h3>\n          Volume Flow{' '}\n          <span>{showVolFlow ? <BiChevronUp /> : <BiChevronDown />}</span>\n        </h3>\n      </ExpandBoxStyles>\n      <AnimatePresence>\n        {showVolFlow && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            style={{ overflow: 'hidden' }}\n          >\n            <VolumeFlowRateConversion />\n          </motion.div>\n        )}\n      </AnimatePresence>\n      <ExpandBoxStyles\n        onClick={() => {\n          setShowTime(!showTime)\n        }}\n      >\n        <h3>\n          Time <span>{showTime ? <BiChevronUp /> : <BiChevronDown />}</span>\n        </h3>\n      </ExpandBoxStyles>\n      <AnimatePresence>\n        {showTime && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            style={{ overflow: 'hidden' }}\n          >\n            <ConvertTime />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </PageWrapper>\n  )\n}\n\nconst ExpandBoxStyles = styled.div`\n  width: 100%;\n  overflow: hidden;\n  font-size: 1.2rem;\n  text-align: center;\n  z-index: 1;\n  padding: 0.25rem;\n  box-shadow: 0px 1px 3px #333;\n  background: #1f7d99;\n  border: 1px solid rgba(50, 50, 50, 0.4);\n`\n\nexport default Conversion\n","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/pages/Home.js",[],"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/ConvertTime.js",[],"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/ConvertTemp.js",["74"],"import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ComponentWrapper, HR } from '../styles/GlobalStyles'\nimport { motion } from 'framer-motion'\nimport { DropdownButton, Dropdown } from 'react-bootstrap'\n\nconst ConvertTemp = () => {\n  const [temps, setTemps] = useState({\n    tempOneVal: 10,\n    tempOneType: 'CELSIUS',\n    tempTwoVal: 50,\n    tempTwoType: 'FAHRENHEIT',\n  })\n\n  const changeType = (e) => {\n    let newValues = { ...temps }\n    if (e.currentTarget.parentNode.parentNode.className.includes('type-one')) {\n      newValues.tempOneType = e.currentTarget.innerHTML\n      tempConvert({ newValues }, 'a')\n    } else if (\n      e.currentTarget.parentNode.parentNode.className.includes('type-two')\n    ) {\n      newValues.tempTwoType = e.currentTarget.innerHTML\n      tempConvert({ newValues }, 'b')\n    }\n  }\n\n  const changeTempVal = (e) => {\n    const numberRegex = /^-?\\d{0,8}\\.?\\d{0,8}$/\n    const decimalEndRegex = /^-?\\d{0,8}\\.$/\n    const negDecimalRegex = /^[-.\\\\]$/\n    let newValues = { ...temps }\n    let changedTemp\n\n    if (e.currentTarget.value === '') {\n      newValues.tempOneVal = ''\n      newValues.tempTwoVal = ''\n      setTemps({ ...newValues })\n    } else {\n      if (negDecimalRegex.test(e.currentTarget.value)) {\n        if (e.currentTarget.name === 'tempOne') {\n          newValues.tempOneVal = e.currentTarget.value\n          newValues.tempTwoVal = e.currentTarget.value\n        }\n        if (e.currentTarget.name === 'tempTwo') {\n          newValues.tempTwoVal = e.currentTarget.value\n          newValues.tempOneVal = e.currentTarget.value\n        }\n        setTemps({ ...newValues })\n      } else if (decimalEndRegex.test(e.currentTarget.value)) {\n        if (e.currentTarget.name === 'tempOne') {\n          newValues.tempOneVal = e.currentTarget.value\n        }\n        if (e.currentTarget.name === 'tempTwo') {\n          newValues.tempTwoVal = e.currentTarget.value\n        }\n        setTemps({ ...newValues })\n      } else if (numberRegex.test(Number(e.currentTarget.value))) {\n        if (e.currentTarget.name === 'tempOne') {\n          newValues.tempOneVal = Number(e.currentTarget.value)\n          changedTemp = 'a'\n        }\n        if (e.currentTarget.name === 'tempTwo') {\n          newValues.tempTwoVal = Number(e.currentTarget.value)\n          changedTemp = 'b'\n        }\n        tempConvert({ newValues }, changedTemp)\n      }\n    }\n  }\n\n  const tempConvert = ({ newValues }, changedTemp = 'a') => {\n    let typeA\n    let tempA\n    let typeB\n    let tempB\n\n    if (changedTemp === 'a') {\n      typeA = newValues.tempOneType\n      tempA = newValues.tempOneVal\n      typeB = newValues.tempTwoType\n      tempB = newValues.tempTwoVal\n    } else {\n      typeA = newValues.tempTwoType\n      tempA = newValues.tempTwoVal\n      typeB = newValues.tempOneType\n      tempB = newValues.tempOneVal\n    }\n\n    let tempAToCelsius\n    switch (typeA) {\n      case 'CELSIUS':\n        tempAToCelsius = tempA\n        break\n      case 'FAHRENHEIT':\n        tempAToCelsius = (tempA - 32) * (5 / 9)\n        break\n      case 'KELVIN':\n        tempAToCelsius = tempA - 273.15\n        break\n      default:\n        console.error('ERROR')\n    }\n\n    switch (typeB) {\n      case 'CELSIUS':\n        tempB = tempAToCelsius\n        break\n      case 'FAHRENHEIT':\n        tempB = tempAToCelsius * (9 / 5) + 32\n        break\n      case 'KELVIN':\n        tempB = tempAToCelsius + 273.15\n        break\n      default:\n        console.error('ERROR')\n    }\n    changedTemp === 'a'\n      ? (newValues.tempTwoVal = tempB.toFixed(6))\n      : (newValues.tempOneVal = tempB.toFixed(8))\n    setTemps({ ...newValues })\n  }\n\n  return (\n    <TemperatureStyles>\n      <div>\n        <input\n          type='text'\n          name='tempOne'\n          value={temps.tempOneVal}\n          onChange={changeTempVal}\n        />\n        <DropdownButton\n          id='dropdown-basic-button'\n          className='dropdown type-one'\n          title={temps.tempOneType}\n        >\n          <Dropdown.Item onClick={changeType}>CELSIUS</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>FAHRENHEIT</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>KELVIN</Dropdown.Item>\n        </DropdownButton>\n      </div>\n      <HR />\n      <div>\n        <input\n          type='text'\n          name='tempTwo'\n          value={temps.tempTwoVal}\n          onChange={changeTempVal}\n        />\n        <DropdownButton\n          id='dropdown-basic-button'\n          drop='up'\n          className='dropdown type-two btn-secondary'\n          title={temps.tempTwoType}\n        >\n          <Dropdown.Item onClick={changeType}>CELSIUS</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>FAHRENHEIT</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>KELVIN</Dropdown.Item>\n        </DropdownButton>\n      </div>\n    </TemperatureStyles>\n  )\n}\n\nconst TemperatureStyles = styled(ComponentWrapper)`\n  transition: all ease-in-out 3s;\n  display: grid;\n  grid-template-rows: 1fr auto 1fr;\n  width: 80%;\n  input {\n    width: 70%;\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n    height: 2.3rem;\n  }\n  .dropdown {\n    display: inline-block;\n    width: 30%;\n    margin: 0;\n    button {\n      margin-top: -4px;\n      padding: 0.3rem;\n      border-radius: 0 4px 4px 0;\n      font-size: 1rem;\n      width: 100%;\n      box-shadow: 0px 1px 3px #333;\n    }\n  }\n\n  @media (min-width: 1400px) {\n    max-width: 60%;\n  }\n\n  @media (max-width: 500px) {\n    width: 90%;\n    gap: 2rem;\n    input {\n      width: 100%;\n      font-size: 1.5rem;\n    }\n    .dropdown {\n      display: block;\n      width: 100%;\n      button {\n        border-radius: 0 0 4px 4px;\n        font-size: 1.2rem;\n      }\n    }\n  }\n`\n\nexport default ConvertTemp\n","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/ConvertPressure.js",["75"],"import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { motion } from 'framer-motion'\nimport { DropdownButton, Dropdown } from 'react-bootstrap'\nimport { ComponentWrapper, HR } from '../styles/GlobalStyles'\n\nconst ConvertPressure = () => {\n  const [pressures, setPressures] = useState({\n    pressureOneVal: 10,\n    pressureOneType: 'PSI',\n    pressureTwoVal: 160,\n    pressureTwoType: 'OZ',\n  })\n\n  const changeType = (e) => {\n    let newValues = { ...pressures }\n    if (e.currentTarget.parentNode.parentNode.className.includes('type-one')) {\n      newValues.pressureOneType = e.currentTarget.innerHTML\n      pressureConvert({ newValues }, 'a')\n    } else if (\n      e.currentTarget.parentNode.parentNode.className.includes('type-two')\n    ) {\n      newValues.pressureTwoType = e.currentTarget.innerHTML\n      pressureConvert({ newValues }, 'b')\n    }\n  }\n\n  const changePressureVal = (e) => {\n    const numberRegex = /^-?\\d{0,8}\\.?\\d{0,8}$/\n    const decimalEndRegex = /^-?\\d{0,8}\\.$/\n    const negDecimalRegex = /^[-.\\\\]$/\n    let newValues = { ...pressures }\n    let changedPressure\n\n    if (e.currentTarget.value === '') {\n      newValues.pressureOneVal = ''\n      newValues.pressureTwoVal = ''\n      setPressures({ ...newValues })\n    } else {\n      if (negDecimalRegex.test(e.currentTarget.value)) {\n        if (e.currentTarget.name === 'pressureOne') {\n          newValues.pressureOneVal = e.currentTarget.value\n          newValues.pressureTwoVal = e.currentTarget.value\n        }\n        if (e.currentTarget.name === 'pressureTwo') {\n          newValues.pressureTwoVal = e.currentTarget.value\n          newValues.pressureOneVal = e.currentTarget.value\n        }\n        setPressures({ ...newValues })\n      } else if (decimalEndRegex.test(e.currentTarget.value)) {\n        if (e.currentTarget.name === 'pressureOne') {\n          newValues.pressureOneVal = e.currentTarget.value\n        }\n        if (e.currentTarget.name === 'pressureTwo') {\n          newValues.pressureTwoVal = e.currentTarget.value\n        }\n        setPressures({ ...newValues })\n      } else if (numberRegex.test(Number(e.currentTarget.value))) {\n        if (e.currentTarget.name === 'pressureOne') {\n          newValues.pressureOneVal = Number(e.currentTarget.value)\n          changedPressure = 'a'\n        }\n        if (e.currentTarget.name === 'pressureTwo') {\n          newValues.pressureTwoVal = Number(e.currentTarget.value)\n          changedPressure = 'b'\n        }\n        pressureConvert({ newValues }, changedPressure)\n      }\n    }\n  }\n\n  const pressureConvert = ({ newValues }, changedPressure = 'a') => {\n    let typeA\n    let pressureA\n    let typeB\n    let pressureB\n\n    if (changedPressure === 'a') {\n      typeA = newValues.pressureOneType\n      pressureA = newValues.pressureOneVal\n      typeB = newValues.pressureTwoType\n      pressureB = newValues.pressureTwoVal\n    } else {\n      typeA = newValues.pressureTwoType\n      pressureA = newValues.pressureTwoVal\n      typeB = newValues.pressureOneType\n      pressureB = newValues.pressureOneVal\n    }\n\n    let pressureAToPSI\n    switch (typeA) {\n      case 'PSI':\n        pressureAToPSI = pressureA\n        break\n      case 'OZ':\n        pressureAToPSI = pressureA / 16\n        break\n      case 'IN/H2O':\n        pressureAToPSI = pressureA / 27.7076\n        break\n      case 'BAR':\n        pressureAToPSI = pressureA * 14.5038\n        break\n      case 'KPA':\n        pressureAToPSI = pressureA / 6.89476\n        break\n      default:\n        console.error('ERROR')\n    }\n\n    switch (typeB) {\n      case 'PSI':\n        pressureB = pressureAToPSI\n        break\n      case 'OZ':\n        pressureB = pressureAToPSI * 16\n        break\n      case 'IN/H2O':\n        pressureB = pressureAToPSI * 27.7076\n        break\n      case 'BAR':\n        pressureB = pressureA / 14.5038\n        break\n      case 'KPA':\n        pressureB = pressureAToPSI * 6.89476\n        break\n      default:\n        console.error('ERROR')\n    }\n    changedPressure === 'a'\n      ? (newValues.pressureTwoVal = pressureB.toFixed(6))\n      : (newValues.pressureOneVal = pressureB.toFixed(6))\n    setPressures({ ...newValues })\n  }\n\n  return (\n    <PressureStyles>\n      <div>\n        <input\n          type='text'\n          name='pressureOne'\n          value={pressures.pressureOneVal}\n          onChange={changePressureVal}\n        />\n        <DropdownButton\n          id='dropdown-basic-button'\n          className='dropdown type-one'\n          title={pressures.pressureOneType}\n        >\n          <Dropdown.Item onClick={changeType}>PSI</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>OZ</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>IN/H2O</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>BAR</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>KPA</Dropdown.Item>\n        </DropdownButton>\n      </div>\n      <HR />\n      <div>\n        <input\n          type='text'\n          name='pressureTwo'\n          value={pressures.pressureTwoVal}\n          onChange={changePressureVal}\n        />\n        <DropdownButton\n          id='dropdown-basic-button'\n          drop='up'\n          className='dropdown type-two btn-secondary'\n          title={pressures.pressureTwoType}\n        >\n          <Dropdown.Item onClick={changeType}>PSI</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>OZ</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>IN/H2O</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>BAR</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>KPA</Dropdown.Item>\n        </DropdownButton>\n      </div>\n    </PressureStyles>\n  )\n}\n\nconst PressureStyles = styled(ComponentWrapper)`\n  transition: all ease-in-out 3s;\n  width: 80%;\n  display: grid;\n  grid-template-rows: 1fr auto 1fr;\n  input {\n    width: 80%;\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n    height: 2.3rem;\n  }\n  .dropdown {\n    display: inline-block;\n    width: 20%;\n    margin: 0;\n\n    button {\n      margin-top: -4px;\n      padding: 0.3rem;\n      border-radius: 0 4px 4px 0;\n      font-size: 1rem;\n      width: 100%;\n      box-shadow: 0px 1px 3px #333;\n      z-index: 10099;\n    }\n  }\n  @media (min-width: 1400px) {\n    max-width: 60%;\n  }\n\n  @media (max-width: 500px) {\n    width: 90%;\n    gap: 2rem;\n    margin: 2.5rem auto 6rem;\n    label {\n      margin-bottom: 0.5rem;\n    }\n    input {\n      width: 100%;\n      font-size: 1.5rem;\n    }\n    .dropdown {\n      display: block;\n      width: 100%;\n      button {\n        border-radius: 0 0 4px 4px;\n        font-size: 1.2rem;\n      }\n    }\n  }\n`\n\nexport default ConvertPressure\n","/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/utilities/dropdown.js",[],["76","77"],"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/pages/AboutUs.js",[],"/Users/delaneyfrost/Desktop/HTML_Projects/myProjects/TechToolSite/techtoolapp/src/components/VolumeFlowRate.js",["78","79","80"],"import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { motion } from 'framer-motion'\nimport { DropdownButton, Dropdown } from 'react-bootstrap'\nimport { ComponentWrapper, HR } from '../styles/GlobalStyles'\n\nconst VolumeFlowRateConversion = () => {\n  const [flowRates, setFlowRates] = useState({\n    flowRateOneVal: 10,\n    flowRateOneType: 'Oil Barrel',\n    flowRateOnePeriod: 'HR',\n    flowRateTwoVal: 315.00000001,\n    flowRateTwoType: 'Gallon',\n    flowRateTwoPeriod: 'SEC',\n  })\n\n  const changeType = (e) => {\n    let newValues = { ...flowRates }\n    if (e.currentTarget.parentNode.parentNode.className.includes('type-one')) {\n      newValues.flowRateOneType = e.currentTarget.innerHTML\n      flowRateConvert({ newValues }, 'a')\n    } else if (\n      e.currentTarget.parentNode.parentNode.className.includes('type-two')\n    ) {\n      newValues.flowRateTwoType = e.currentTarget.innerHTML\n      flowRateConvert({ newValues }, 'b')\n    }\n  }\n\n  const changeFlowRateVal = (e) => {\n    const numberRegex = /^-?\\d{0,8}\\.?\\d{0,8}$/\n    const decimalEndRegex = /^-?\\d{0,8}\\.$/\n    const negDecimalRegex = /^[-.\\\\]$/\n    let newValues = { ...flowRates }\n    let changedFlowRate\n\n    if (e.currentTarget.value === '') {\n      newValues.flowRateOneVal = ''\n      newValues.flowRateTwoVal = ''\n      setFlowRates({ ...newValues })\n    } else {\n      if (negDecimalRegex.test(e.currentTarget.value)) {\n        if (e.currentTarget.name === 'flowRateOne') {\n          newValues.flowRateOneVal = e.currentTarget.value\n          newValues.flowRateTwoVal = e.currentTarget.value\n        }\n        if (e.currentTarget.name === 'flowRateTwo') {\n          newValues.flowRateTwoVal = e.currentTarget.value\n          newValues.flowRateOneVal = e.currentTarget.value\n        }\n        setFlowRates({ ...newValues })\n      } else if (decimalEndRegex.test(e.currentTarget.value)) {\n        if (e.currentTarget.name === 'flowRateOne') {\n          newValues.flowRateOneVal = e.currentTarget.value\n        }\n        if (e.currentTarget.name === 'flowRateTwo') {\n          newValues.flowRateTwoVal = e.currentTarget.value\n        }\n        setFlowRates({ ...newValues })\n      } else if (numberRegex.test(Number(e.currentTarget.value))) {\n        if (e.currentTarget.name === 'flowRateOne') {\n          newValues.flowRateOneVal = Number(e.currentTarget.value)\n          changedFlowRate = 'a'\n        }\n        if (e.currentTarget.name === 'flowRateTwo') {\n          newValues.flowRateTwoVal = Number(e.currentTarget.value)\n          changedFlowRate = 'b'\n        }\n        flowRateConvert({ newValues }, changedFlowRate)\n      }\n    }\n  }\n\n  const flowRateConvert = ({ newValues }, changedFlowRate = 'a') => {\n    let typeA\n    let flowRateA\n    let periodA\n    let typeB\n    let flowRateB\n    let periodB\n\n    if (changedFlowRate === 'a') {\n      typeA = newValues.flowRateOneType\n      flowRateA = newValues.flowRateOneVal\n      periodA = newValues.flowRateOnePeriod\n      typeB = newValues.flowRateTwoType\n      flowRateB = newValues.flowRateTwoVal\n      periodB = newValues.flowRateTwoPeriod\n    } else {\n      typeA = newValues.flowRateTwoType\n      flowRateA = newValues.flowRateTwoVal\n      periodA = newValues.flowRateTwoPeriod\n      typeB = newValues.flowRateOneType\n      flowRateB = newValues.flowRateOneVal\n      periodB = newValues.flowRateOnePeriod\n    }\n\n    let flowRateAToBBL\n    switch (typeA) {\n      case 'Oil Barrel':\n        flowRateAToBBL = flowRateA\n        break\n      case 'Gallon':\n        flowRateAToBBL = flowRateA / 31.500000001\n        break\n      case 'Cubic Centimeter':\n        flowRateAToBBL = flowRateA / 119240.4712\n        break\n      case 'Million Cubic Foot':\n        flowRateAToBBL = flowRateA / 0.0000042109374395\n        break\n      case 'Liter':\n        flowRateAToBBL = flowRateA / 119.2404712\n        break\n      default:\n        console.error('ERROR')\n    }\n\n    switch (typeB) {\n      case 'Oil Barrel':\n        flowRateB = flowRateAToBBL\n        break\n      case 'Gallon':\n        flowRateB = flowRateAToBBL * 31.500000001\n        break\n      case 'Cubic Centimeter':\n        flowRateB = flowRateAToBBL * 119240.4712\n        break\n      case 'Million Cubic Foot':\n        flowRateB = flowRateAToBBL * 0.0000042109374395\n        break\n      case 'Liter':\n        flowRateB = flowRateAToBBL * 119.2404712\n        break\n      default:\n        console.error('ERROR')\n    }\n    changedFlowRate === 'a'\n      ? (newValues.flowRateTwoVal = flowRateB.toFixed(6))\n      : (newValues.flowRateOneVal = flowRateB.toFixed(6))\n    setFlowRates({ ...newValues })\n  }\n\n  return (\n    <FlowRateStyles>\n      <div>\n        <input\n          type='text'\n          name='flowRateOne'\n          value={flowRates.flowRateOneVal}\n          onChange={changeFlowRateVal}\n        />\n        <DropdownButton\n          id='dropdown-basic-button'\n          className='dropdown type-one'\n          title={flowRates.flowRateOneType}\n        >\n          <Dropdown.Item onClick={changeType}>Oil Barrel</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>Gallon</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>Cubic Centimeter</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>Million Cubic Foot</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>Liter</Dropdown.Item>\n        </DropdownButton>\n      </div>\n      <HR />\n      <div>\n        <input\n          type='text'\n          name='flowRateTwo'\n          value={flowRates.flowRateTwoVal}\n          onChange={changeFlowRateVal}\n        />\n        <DropdownButton\n          id='dropdown-basic-button'\n          drop='up'\n          className='dropdown type-two btn-secondary'\n          title={flowRates.flowRateTwoType}\n        >\n          <Dropdown.Item onClick={changeType}>Oil Barrel</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>Gallon</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>Cubic Centimeter</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>Million Cubic Foot</Dropdown.Item>\n          <Dropdown.Item onClick={changeType}>Liter</Dropdown.Item>\n        </DropdownButton>\n      </div>\n    </FlowRateStyles>\n  )\n}\n\nconst FlowRateStyles = styled(ComponentWrapper)`\n  transition: all ease-in-out 3s;\n  width: 80%;\n  display: grid;\n  grid-template-rows: 1fr auto 1fr;\n  input {\n    width: 80%;\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n    height: 2.3rem;\n  }\n  .dropdown {\n    display: inline-block;\n    width: 20%;\n    margin: 0;\n    button {\n      margin-top: -4px;\n      padding: 0.3rem;\n      border-radius: 0 4px 4px 0;\n      font-size: 1rem;\n      width: 100%;\n      box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n      z-index: 10099;\n    }\n  }\n\n  @media (min-width: 1400px) {\n    max-width: 60%;\n  }\n\n  @media (max-width: 1000px) {\n    input {\n      width: 60%;\n    }\n    .dropdown {\n      width: 40%;\n    }\n  }\n\n  @media (max-width: 600px) {\n    width: 90%;\n    gap: 2rem;\n    margin: 2.5rem auto 6rem;\n    label {\n      margin-bottom: 0.5rem;\n    }\n    input {\n      width: 100%;\n      font-size: 1.5rem;\n    }\n    .dropdown {\n      display: block;\n      width: 100%;\n      button {\n        border-radius: 0 0 4px 4px;\n        font-size: 1.2rem;\n      }\n    }\n  }\n`\n\nexport default VolumeFlowRateConversion\n",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"89","line":2,"column":10,"nodeType":"87","messageId":"88","endLine":2,"endColumn":14},{"ruleId":"85","severity":1,"message":"90","line":4,"column":10,"nodeType":"87","messageId":"88","endLine":4,"endColumn":16},{"ruleId":"85","severity":1,"message":"90","line":3,"column":10,"nodeType":"87","messageId":"88","endLine":3,"endColumn":16},{"ruleId":"81","replacedBy":"91"},{"ruleId":"83","replacedBy":"92"},{"ruleId":"85","severity":1,"message":"90","line":3,"column":10,"nodeType":"87","messageId":"88","endLine":3,"endColumn":16},{"ruleId":"85","severity":1,"message":"93","line":92,"column":7,"nodeType":"87","messageId":"88","endLine":92,"endColumn":14},{"ruleId":"85","severity":1,"message":"94","line":95,"column":7,"nodeType":"87","messageId":"88","endLine":95,"endColumn":14},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'motion' is defined but never used.",["95"],["96"],"'periodA' is assigned a value but never used.","'periodB' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]